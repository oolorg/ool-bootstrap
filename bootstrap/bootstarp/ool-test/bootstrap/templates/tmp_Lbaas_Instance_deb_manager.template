{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Template Lbaas_manager_Instance: This template builds a manager to manage the verification and validation content for VM.",

  "Parameters" : {

    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String"
    },
    "ProvHost" : {
      "Type" : "String"
    },
    "SubnetId" : {
      "Type" : "String",
      "Description" : "Id of an existing subnet"
    },
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "m1.tiny", "m1.small", "m1.medium", "m1.large", "m1.xlarge" ],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "LinuxDistribution": {
      "Default": "U12",
      "Description" : "Distribution of choice",
      "Type": "String",
      "AllowedValues" : [ "U12" ]
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "m1.tiny"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"    : { "Arch" : "64" },
      "m1.large"   : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" }
    },
    "DistroArch2AMI": {
      "U12"      : { "64" : "U12-x86_64-cfntools-review" }
    }
  },

  "Resources" : {
    "LBMan": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "services" : {
              "sysvinit" : {
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "DistroArch2AMI", { "Ref" : "LinuxDistribution" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "KeyName"        : { "Ref" : "KeyName" },
        "SubnetId" : { "Ref" : "SubnetId" },
        "AvailabilityZone" : {"Ref": "ProvHost"},
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "ifconfig eth0 mtu 1422\n",
          "apt-get install python-matplotlib -y\n",
          "mkdir /usr/lib/verification\n",
          "mkdir /usr/lib/verification/tmp\n",
          "mkdir /usr/lib/verification/tmp/vmstat\n",
          "mkdir /usr/lib/verification/tmp/netstat\n",
          "mkdir /usr/lib/verification/tmp/iptraf\n",
          "mkdir /usr/lib/verification/template\n",
          "mkdir /usr/lib/verification/cgi-bin\n",
          "cat > /usr/lib/verification/cgi-bin/request.py <<EOF\n",
          "#!/usr/bin/env python\n",
          "# coding: utf-8\n",
          "\n",
          "import os\n",
          "import threading\n",
          "import time\n",
          "\n",
          "fpath = os.path.abspath(os.path.dirname(__file__)) + \"/../vip.txt\"\n",
          "\n",
          "VERIFY_TIME=400\n",
          "REQUEST_SPAN=4\n",
          "REQUEST_URL=\"curl -s  http://\"\n",
          "\n",
          "class RequestThread(threading.Thread):\n",
          "        def __init__(self):\n",
          "                threading.Thread.__init__(self)\n",
          "\n",
          "        def run(self):\n",
          "                os.system(REQUEST_URL)\n",
          "\n",
          "f = open(fpath)\n",
          "vip = f.readline()\n",
          "f.close()\n",
          "REQUEST_URL=REQUEST_URL + vip\n",
          "\n",
          "for var in range(VERIFY_TIME/REQUEST_SPAN):\n",
          "        th = RequestThread()\n",
          "        th.start()\n",
          "        time.sleep(REQUEST_SPAN)\n",
          "\n",
          "EOF\n",
          "cat > /usr/lib/verification/cgi-bin/execute.py <<EOF\n",
          "#!/usr/bin/env python\n",
          "\n",
          "import subprocess\n",
          "import os\n",
          "import commands\n",
          "import matplotlib\n",
          "matplotlib.use('Agg')\n",
          "import matplotlib.dates as mdates\n",
          "import matplotlib.pyplot as plt\n",
          "\n",
          "from pylab import *\n",
          "import time\n",
          "import datetime\n",
          "import threading\n",
          "import traceback\n",
          "import inspection as ins\n",
          "\n",
          "fpath = os.path.abspath(os.path.dirname(__file__)) + \"/../ipaddress.txt\"\n",
          "vmstatpath = os.path.abspath(os.path.dirname(__file__)) + \"/../tmp/vmstat/%s/%s\"\n",
          "netstatpath = os.path.abspath(os.path.dirname(__file__)) + \"/../tmp/netstat/%s/%s\"\n",
          "iptrafpath = os.path.abspath(os.path.dirname(__file__)) + \"/../tmp/iptraf/%s/iptraf.log\"\n",
          "\n",
          "vmstat_base = os.path.abspath(os.path.dirname(__file__)) + \"/../tmp/vmstat/%s\"\n",
          "netstat_base = os.path.abspath(os.path.dirname(__file__)) + \"/../tmp/netstat/%s\"\n",
          "iptraf_base = os.path.abspath(os.path.dirname(__file__)) + \"/../tmp/iptraf/%s\"\n",
          "\n",
          "command_opt=[\"iptraf\", \"vmstat\", \"netstat\"]\n",
          "\n",
          "VERIFY_TIME=200\n",
          "REQUEST_SPAN=15\n",
          "REQUEST_VMSTAT_URL=\"curl -s -X GET 'http://%s:18000/cgi-bin/vmstat.py'\"\n",
          "REQUEST_NETSTAT_URL=\"curl -s -X GET 'http://%s:18000/cgi-bin/netstat.py'\"\n",
          "REQUEST_IPTRAF_URL=\"curl -s -X GET 'http://%s:18000/cgi-bin/iptraf.py'\"\n",
          "RESULT_IPTRAF_URL=\"curl -s -X GET 'http://%s:18000/iptraf.log'\"\n",
          "\n",
          "class RequestThread(threading.Thread):\n",
          "\n",
          "        url=\"\"\n",
          "        opt=\"\"\n",
          "        path=\"\"\n",
          "        ip = None\n",
          "\n",
          "        def get_now(self):\n",
          "                now = datetime.datetime.now()\n",
          "                return now.strftime(\"%Y%m%d%H%M%S\")\n",
          "\n",
          "        def __init__(self, ip, opt):\n",
          "                self.opt=opt\n",
          "                self.ip = ip\n",
          "                if opt == \"iptraf\":\n",
          "                        self.url=REQUEST_IPTRAF_URL % ip\n",
          "                elif opt == \"vmstat\":\n",
          "                        self.url=REQUEST_VMSTAT_URL % ip\n",
          "                        self.path=vmstatpath\n",
          "                elif opt == \"netstat\":\n",
          "                        self.url=REQUEST_NETSTAT_URL % ip\n",
          "                        self.path=netstatpath\n",
          "                threading.Thread.__init__(self)\n",
          "\n",
          "        def run(self):\n",
          "                if self.opt == \"iptraf\":\n",
          "                        os.system(self.url)\n",
          "                elif self.opt == \"vmstat\" or self.opt == \"netstat\":\n",
          "                        COUNT=VERIFY_TIME/REQUEST_SPAN\n",
          "                        for var in range(COUNT):\n",
          "                                f = open(self.path % (self.ip, self.get_now()), \"w\")\n",
          "                                res=commands.getoutput(self.url)\n",
          "                                f.write(res)\n",
          "                                f.close()\n",
          "                                time.sleep(REQUEST_SPAN)\n",
          "\n",
          "def make_dir(path):\n",
          "        try:\n",
          "                if not os.path.exists(path):\n",
          "                        os.mkdir(path)\n",
          "                else:\n",
          "                        os.system(\"rm -rf \" + path + \"/*\")\n",
          "        except:\n",
          "                print \"mkdir failed.\"\n",
          "\n",
          "f = open(fpath)\n",
          "targets=[]\n",
          "for ip in f:\n",
          "        targets.append(ip.strip('\\n'))\n",
          "f.close()\n",
          "\n",
          "subprocess.Popen([\"/usr/bin/python\", os.path.abspath(os.path.dirname(__file__)) + \"/request.py\"])\n",
          "\n",
          "for ip in targets:\n",
          "        make_dir(vmstat_base % str(ip))\n",
          "        make_dir(netstat_base % str(ip))\n",
          "        make_dir(iptraf_base % str(ip))\n",
          "        for opt in command_opt:\n",
          "                 th = RequestThread(str(ip), opt)\n",
          "                 th.start()\n",
          "\n",
          "while True:\n",
          "        tlist=threading.enumerate()\n",
          "        if len(tlist) < 2:\n",
          "               break\n",
          "        time.sleep(1)\n",
          "\n",
          "ins.output_cpu_glaph()\n",
          "ins.output_connection_glaph()\n",
          "\n",
          "fig = plt.figure()\n",
          "fig.autofmt_xdate()\n",
          "ax = plt.axes()\n",
          "ax.fmt_xdata = mdates.DateFormatter(\"%H:%M:%S\")\n",
          "ax.xaxis.set_major_formatter(mdates.DateFormatter(\"%H:%M:%S\"))\n",
          "plt.title('Trafic')\n",
          "plt.ylabel('Byte')\n",
          "plt.xlabel('time')\n",
          "plt.grid(True)\n",
          "plt.legend(loc=0, shadow=True)\n",
          "for ip in targets:\n",
          "        iptraf_url = RESULT_IPTRAF_URL % ip\n",
          "        f = open(iptrafpath % ip, \"w\")\n",
          "        f.write(commands.getoutput(iptraf_url))\n",
          "        f.close()\n",
          "        log=commands.getoutput(\"awk '{print \\$4 \\\\\" \\\\\" \\$8 \\\\\" \\\\\" \\$11}' %s\" % (iptrafpath % ip))\n",
          "\n",
          "        x = []\n",
          "        y = []\n",
          "        for l in log.split(\"\\n\"):\n",
          "                try:\n",
          "                        v, k, m = l.split(\" \")\n",
          "                        if not len(v) or not len(k) or not len(m):\n",
          "                                continue\n",
          "                        if \":\" not in m:\n",
          "                                continue\n",
          "                        address, port = m.split(\":\")\n",
          "                        if not len(address) or not len(port):\n",
          "                                continue\n",
          "                        if address != ip or port != \"80\":\n",
          "                                continue\n",
          "                        if v not in x:\n",
          "                                x.append(v)\n",
          "                                y.append(int(k))\n",
          "                        else:\n",
          "                                i = x.index(v)\n",
          "                                y[i] += int(k)\n",
          "                except Exception as e:\n",
          "                        print str(type(e)) + str(e.args) + str(e.message)\n",
          "                        print traceback.format_exc()\n",
          "        xx = []\n",
          "        for d in x:\n",
          "                xx.append(datetime.datetime.strptime(d, \"%H:%M:%S\"))\n",
          "        plt.plot(xx, y, label=ip)\n",
          "ax.legend(loc=0, shadow=True)\n",
          "fig.autofmt_xdate()\n",
          "plt.savefig(os.path.abspath(os.path.dirname(__file__)) + \"/../iptraf.png\")\n",
          "plt.close()\n",
          "\n",
          "commands.getoutput(\"/usr/bin/python \" + os.path.abspath(os.path.dirname(__file__)) + \"/verify_result.py\")\n",
          "EOF\n",
          "cat > /usr/lib/verification/cgi-bin/inspection.py <<EOF\n",
          "#!/usr/bin/env python\n",
          "# coding: utf-8\n",
          "\n",
          "import os\n",
          "import threading\n",
          "import time\n",
          "import matplotlib as mpl\n",
          "mpl.use('Agg')\n",
          "import matplotlib.dates as mdates\n",
          "import matplotlib.pyplot as plt\n",
          "import time\n",
          "import datetime\n",
          "\n",
          "vmstat_base = os.path.abspath(os.path.dirname(__file__)) + \"/../tmp/vmstat\"\n",
          "netstat_base = os.path.abspath(os.path.dirname(__file__)) + \"/../tmp/netstat\"\n",
          "\n",
          "def get_cpu_info(root, files):\n",
          "\n",
          "        ret = {}\n",
          "        cpus = []\n",
          "        times = []\n",
          "        for f in files:\n",
          "                times.append(datetime.datetime.strptime(f, '%Y%m%d%H%M%S'))\n",
          "                fpath = os.path.join(root, f)\n",
          "                f = open(fpath, 'r')\n",
          "                data = f.read().split(' ')\n",
          "                cpus.append( int(data[0]) + int(data[1]) )\n",
          "        ret['cpu'] = cpus\n",
          "        times.sort()\n",
          "        ret['time'] = times\n",
          "        return ret\n",
          "\n",
          "def get_connection_info(root, files):\n",
          "        ret = {}\n",
          "        count = []\n",
          "        times = []\n",
          "        for f in files:\n",
          "                times.append(datetime.datetime.strptime(f, '%Y%m%d%H%M%S'))\n",
          "                fpath = os.path.join(root, f)\n",
          "                f = open(fpath, 'r')\n",
          "                data = f.read()\n",
          "                count.append( int(data) )\n",
          "        ret['count'] = count\n",
          "        times.sort()\n",
          "        ret['time'] = times\n",
          "        return ret\n",
          "\n",
          "def conv_vmstat():\n",
          "        ret = {}\n",
          "        hosts = []\n",
          "        for root, dirs, files in os.walk(vmstat_base):\n",
          "                for d in dirs:\n",
          "                        hosts.append(d)\n",
          "        for h in hosts:\n",
          "                for root, dirs, files in os.walk(vmstat_base + '/' + h):\n",
          "                        ret[h] = get_cpu_info(root, files)\n",
          "        return ret\n",
          "\n",
          "def conv_netstat():\n",
          "        ret = {}\n",
          "        hosts = []\n",
          "        for root, dirs, files in os.walk(netstat_base):\n",
          "                for d in dirs:\n",
          "                        hosts.append(d)\n",
          "        for h in hosts:\n",
          "                for root, dirs, files in os.walk(netstat_base + '/' + h):\n",
          "                        ret[h] = get_connection_info(root, files)\n",
          "        return ret\n",
          "\n",
          "def output_cpu_glaph():\n",
          "        info = conv_vmstat()\n",
          "        plt.clf()\n",
          "        fig = plt.figure()\n",
          "        ax = plt.axes()\n",
          "        ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))\n",
          "        plt.title('CPU usage')\n",
          "        plt.xlabel('time')\n",
          "        plt.ylabel('us + sy')\n",
          "        plt.grid(True)\n",
          "        plt.legend(loc=4, shadow=True)\n",
          "        for host in info.keys():\n",
          "                plt.plot(info[host]['time'], info[host]['cpu'], label=host)\n",
          "                plt.legend(loc=0, shadow=True)\n",
          "        plt.ylim(ymin=0)\n",
          "        fig.autofmt_xdate()\n",
          "        plt.savefig(os.path.abspath(os.path.dirname(__file__)) + \"/../vmstat.png\")\n",
          "        plt.close()\n",
          "\n",
          "def output_connection_glaph():\n",
          "        info = conv_netstat()\n",
          "        plt.clf()\n",
          "        fig = plt.figure()\n",
          "        ax = plt.axes()\n",
          "        ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M:%S'))\n",
          "        plt.title('Connections')\n",
          "        plt.ylabel('connection(N)')\n",
          "        plt.xlabel('time')\n",
          "        plt.grid(True)\n",
          "        for host in info.keys():\n",
          "                plt.plot(info[host]['time'], info[host]['count'], label=host)\n",
          "        plt.legend(loc=0, shadow=True)\n",
          "        plt.ylim(ymax=10, ymin=0)\n",
          "        fig.autofmt_xdate()\n",
          "        plt.savefig(os.path.abspath(os.path.dirname(__file__)) + \"/../netstat.png\")\n",
          "        plt.close()\n",
          "\n",
          "EOF\n",
          "cat > /usr/lib/verification/cgi-bin/verify_result.py <<EOF\n",
          "#!/usr/bin/env python\n",
          "# coding: utf-8\n",
          "\n",
          "import os\n",
          "import sys\n",
          "from string import Template\n",
          "import base64\n",
          "import datetime\n",
          "\n",
          "def get_now():\n",
          "        now = datetime.datetime.now()\n",
          "        return now.strftime(\"%Y/%m/%d %H:%M:%S\")\n",
          "if (os.path.exists(\"/usr/lib/verification/result.html\")):\n",
          "        os.system(\"rm -rf /usr/lib/verification/result.html\")\n",
          "fpath = os.path.abspath(os.path.dirname(__file__)) + \"/../iptraf.png\"\n",
          "img=open(fpath)\n",
          "img_enc=base64.b64encode(img.read())\n",
          "img.close()\n",
          "ret=\"<img id='iptraf' src='data:image/png;base64,\"+img_enc+\"'>\"\n",
          "ret+=\"<br>\"\n",
          "f=open(\"/usr/lib/verification/template/result.tmpl\")\n",
          "data=f.read()\n",
          "tmpl=Template(unicode(data,\"utf-8\",\"ignore\"))\n",
          "fpath = os.path.abspath(os.path.dirname(__file__)) + \"/../vmstat.png\"\n",
          "img=open(fpath)\n",
          "img_enc=base64.b64encode(img.read())\n",
          "img.close()\n",
          "ret+=\"<img id='vmstat' src='data:image/png;base64,\"+img_enc+\"'>\"\n",
          "ret+=\"<br>\"\n",
          "fpath = os.path.abspath(os.path.dirname(__file__)) + \"/../netstat.png\"\n",
          "img=open(fpath)\n",
          "img_enc=base64.b64encode(img.read())\n",
          "img.close()\n",
          "ret+=\"<img id='netstat' src='data:image/png;base64,\"+img_enc+\"'>\"\n",
          "ret+=\"<br>Creation Date : \" + get_now()\n",
          "body=tmpl.substitute({\"body\":ret.encode(\"utf-8\")})\n",
          "fw=open(os.path.abspath(os.path.dirname(__file__)) + \"/../result.html\", \"w\")\n",
          "fw.write(body)\n",
          "f.close()\n",
          "EOF\n",
          "cat > /usr/lib/verification/template/result.tmpl <<EOF\n",
          "<html>\n",
          "<head>\n",
          "<meta content-type=\"text/html\" charset=\"UTF-8\">\n",
          "<title>Bootstrap for Verification</title>\n",
          "</head>\n",
          "<body>\n",
          "<div align=\"center\">\n",
          "\\${body}\n",
          "</div>\n",
          "</body>\n",
          "</html>\n",
          "EOF\n",
          "chmod -R 777 /usr/lib/verification\n",
          "sudo sh -c \"echo 'StrictHostKeyChecking=no' >> /etc/ssh/ssh_config\"\n"
        ]]}}
      }
    }
  },

  "Outputs" : {
  }
}
